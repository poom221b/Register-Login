import unittest
from unittest.mock import patch, MagicMock
import bcrypt
from main import is_valid_password, register, login  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå

class TestUserFunctions(unittest.TestCase):

    def test_is_valid_password_valid(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
        self.assertTrue(is_valid_password("Password123"))

    def test_is_valid_password_invalid(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"""
        self.assertFalse(is_valid_password("short1"))
        self.assertFalse(is_valid_password("password"))
        self.assertFalse(is_valid_password("12345678"))

    @patch("openpyxl.load_workbook")
    def test_register_username_exists(self, mock_load_workbook):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ Username ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ username ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
        mock_sheet = MagicMock()
        mock_load_workbook.return_value.active = mock_sheet
        mock_sheet.iter_rows.return_value = [("existing_username", "hashed_password")]

        with patch("builtins.input", return_value="existing_username"):
            with patch("builtins.print") as mock_print:
                register()
                mock_print.assert_called_with("Username already exists! üòÖ Please try again.")

    @patch("openpyxl.load_workbook")
    @patch("openpyxl.Workbook.save")
    def test_register_new_user(self, mock_save, mock_load_workbook):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"""
        mock_sheet = MagicMock()
        mock_load_workbook.return_value.active = mock_sheet
        mock_sheet.iter_rows.return_value = []

        with patch("builtins.input", side_effect=["new_username", "ValidPassword123"]):
            with patch("builtins.print") as mock_print:
                register()
                mock_print.assert_any_call("Password is valid! üéâ")
                mock_print.assert_any_call("Registration successful! üéâ")
                mock_save.assert_called_once()

    @patch("openpyxl.load_workbook")
    def test_login_success(self, mock_load_workbook):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock sheet
        mock_sheet = MagicMock()
        mock_load_workbook.return_value.active = mock_sheet

        # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô
        password = "ValidPassword123"
        hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt(rounds=4)).decode()

        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á iter_rows ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ username ‡πÅ‡∏•‡∏∞ hashed_password
        mock_sheet.iter_rows.return_value = iter([("username", hashed_password)])  # mock data

        # Mock bcrypt.checkpw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
        with patch("bcrypt.checkpw", return_value=True) as mock_checkpw:
            with patch("builtins.input", side_effect=["username", password]):
                with patch("builtins.print") as mock_print:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login
                    login()

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bcrypt.checkpw ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    mock_checkpw.assert_called_once_with(password.encode(), hashed_password.encode())
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà print ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                    mock_print.assert_called_with("Login successful! ‚ú®")

    @patch("openpyxl.load_workbook")
    def test_login_failure(self, mock_load_workbook):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock sheet
        mock_sheet = MagicMock()
        mock_load_workbook.return_value.active = mock_sheet

        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á iter_rows ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        mock_sheet.iter_rows.return_value = [("username", "hashed_password")]

        # Patch bcrypt.checkpw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        with patch("bcrypt.checkpw", return_value=False):
            with patch("builtins.input", side_effect=["username", "WrongPassword123"]):
                with patch("builtins.print") as mock_print:
                    login()
                    mock_print.assert_called_with("Invalid username or password! üòû")
    def tearDown(self):
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î mock ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
        pass


if __name__ == "__main__":
    unittest.main()
